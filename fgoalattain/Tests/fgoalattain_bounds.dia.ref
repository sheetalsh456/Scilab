// assert_close --
//   Returns 1 if the two real matrices computed and expected are close,
//   i.e. if the relative distance between computed and expected is lesser than epsilon.
// Arguments computed, expected : the two matrices to compare
//   epsilon : a small number

function flag = assert_close ( computed, expected, epsilon )
  if expected==0.0 then
    shift = norm(computed-expected);
  else
    shift = norm(computed-expected)/norm(expected);
  end
//  if shift < epsilon then
//    flag = 1;
//  else
//    flag = 0;
//  end
//  if flag <> 1 then bugmes();quit;end
  flag = assert_checktrue ( shift < epsilon );
endfunction

// assert_equal --
//   Returns 1 if the two real matrices computed and expected are equal.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number

//function flag = assert_equal ( computed , expected )
//  if computed==expected then
//    flag = 1;
//  else
//    flag = 0;
//  end
//  if flag <> 1 then bugmes();quit;end
//endfunction
// Test fgoalattain / interior-point with a nonlinearily constrained problem.

// Test with bound constraints
function f = objfun ( x )
f(1)=x(1)+x(2)-9*x(1)*x(2);
f(2)=x(5)*x(1)+x(4)*x(3);
f(3)=x(5)-6*x(4)*x(3);
f(4)=-x(1)*x(1)-3*x(2)*x(2)
f(5)=x(1)+3*x(2)-18
f(6) = 100*(x(2)-x(1)^2)^2 + (1-x(1))^2;
f(7)= x(2)-x(1)*5+x(2)*x(2)
endfunction

function [c,ceq]=nonlinfun(x)
c=[3*x(4)*x(5)+x(1)];
ceq=[7*x(1)+x(2);x(4)-x(3)*x(3)];
endfunction

x0=[1,3,2,5.9,4];
goal=[9,0,7,7,-5.6,0,3];
weight=[7.7,0,3.2,0,4,6,2];
lb=[6,3,9,1,2];
ub=[7,4,100,45.9,67.8];
A=[7.4,0,-3.6,5,2.7];
b=[9];
Aeq=[8,6,-4,0,2];
beq=[3];
[x,fval,attainfactor,exitflag,output,lambda] = fgoalattain ( objfun , x0,goal,weight,A,b,Aeq,beq,lb,ub,nonlinfun);
assert_close ( x , [6.    3.    16.75    1.    2.], 1e-4 );
assert_close ( fval , - 153. ,  28.75  , - 98.499999  , - 63. ,  - 3. ,  108925. , - 18. , 1e-4 );
