<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from fminbnd.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="fminbnd" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>fminbnd</refname>
    <refpurpose>Find minimum of Multi-variable function on bounded interval</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = fminbnd(f,x1,x2)
   xopt = fminbnd(f,x1,x2,options)
   [xopt,fopt] = fminbnd(.....)
   [xopt,fopt,exitflag]= fminbnd(.....)
   [xopt,fopt,exitflag,output]=fminbnd(.....)
   [xopt,fopt,exitflag,output,zl,zu]=fminbnd(.....)
   
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>f :</term>
      <listitem><para> a function, representing objective function of the problem</para></listitem></varlistentry>
   <varlistentry><term>x1 :</term>
      <listitem><para> a vector, containing lower bound of the variables of size (1 X n) or (n X 1) where 'n' is the number of Variables, where n is number of Variables</para></listitem></varlistentry>
   <varlistentry><term>x2 :</term>
      <listitem><para> a vector, containing upper bound of the variables of size (1 X n) or (n X 1) or (0 X 0) where 'n' is the number of Variables. If x2 is empty it means upper bound is +infinity</para></listitem></varlistentry>
   <varlistentry><term>options :</term>
      <listitem><para> a list, containing option for user to specify -Maximum iteration, Maximum CPU-time, TolX</para></listitem></varlistentry>
   <varlistentry><term>xopt :</term>
      <listitem><para> a vector of doubles, containing the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>fopt :</term>
      <listitem><para> a scalar of double, containing the function value at x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> a scalar of integer, containing flag which denotes the reason for termination of algorithm</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> a structure, containing information about the optimization.</para></listitem></varlistentry>
   <varlistentry><term>zl :</term>
      <listitem><para> a vector of doubles, containing lower bound multipliers</para></listitem></varlistentry>
   <varlistentry><term>zu :</term>
      <listitem><para> a vector of doubles, containing upper bound multipliers</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a multi-variable function on bounded interval specified by :
find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; f(x)\\
&amp; \text{subject to} &amp; x1 \ &lt; x \ &lt; x2 \\
\end{eqnarray}
</latex>
   </para>
   <para>
We are calling IPOpt for solving the unconstrained problem, IPOpt is a library written in C++.
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

//Find x in R^6 such that it minimizes:
//f(x)= sin(x1) + sin(x2) + sin(x3) + sin(x4) + sin(x5) + sin(x6)
//-2 <= x1,x2,x3,x4,x5,x6 <= 2

//Objective function to be minimised
function y=f(x)
y=0
for i =1:6
y=y+sin(x(i));
end
endfunction

//Variable bounds
x1 = [-2, -2, -2, -2, -2, -2];
x2 = [2, 2, 2, 2, 2, 2];

//Options
options=list("MaxIter",[1500],"CpuTime", [100],"TolX",[1e-6])

//Calling IPopt
[x,fval,exitflag,output,zl,zu] =fminbnd(f, x1, x2, options)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

//Find x in R such that it minimizes:
//f(x)= 1/x^2
//0 <= x <= 1000

//Objective function to be minimised
function y=f(x)
y=1/x^2
endfunction

//Variable bounds
x1 = [0];
x2 = [1000];

//Calling IPopt
[x,fval,exitflag,output,zl,zu] =fminbnd(f, x1, x2)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

The below Problem is an Unbounded problem:
//Find x in R^2 such that it minimizes:
//f(x)= -[(x1-1)^2 + (x2-1)^2]
//-inf <= x1,x2 <= inf

//Objective function to be minimised
function y=f(x)
y=-((x(1)-1)^2+(x(2)-1)^2);
endfunction

//Variable bounds
x1 = [-%inf , -%inf];
x2 = [];

//Options
options=list("MaxIter",[1500],"CpuTime", [100],"TolX",[1e-6])

//Calling IPopt
[x,fval,exitflag,output,zl,zu] =fminbnd(f, x1, x2, options)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>R.Vidyadhar , Vignesh Kannan</member>
   </simplelist>
</refsection>
</refentry>
