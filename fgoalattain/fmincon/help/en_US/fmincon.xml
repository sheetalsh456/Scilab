<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from fmincon.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="fmincon" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>fmincon</refname>
    <refpurpose>Solves a Constrainted Optimization Problem</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = fmincon(f,x0,A,b)
   xopt = fmincon(f,x0,A,b,Aeq,beq)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad,lHess)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,lHess)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,cGrad)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad,cGrad)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,lHess,cGrad)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad,lHess,cGrad)
   [xopt,fopt] = fmincon(.....)
   [xopt,fopt,exitflag]= fmincon(.....)
   [xopt,fopt,exitflag,output]= fmincon(.....)
   [xopt,fopt,exitflag,output,lambda]=fmincon(.....)
   [xopt,fopt,exitflag,output,lambda,gradient]=fmincon(.....)
   [xopt,fopt,exitflag,output,lambda,gradient,hessian]=fmincon(.....)
   [xopt,fopt,exitflag,output,lambda,gradient,hessian,zl]=fmincon(.....)
   [xopt,fopt,exitflag,output,lambda,gradient,hessian,zl,zu]=fmincon(.....)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>f :</term>
      <listitem><para> a function, representing objective function of the problem</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> a vector of doubles, containing starting values of variables of size (1 X n) or (n X 1) where 'n' is the number of Variables</para></listitem></varlistentry>
   <varlistentry><term>A :</term>
      <listitem><para> a matrix of doubles, containing coefficients of Linear Inequality Constraints of size (m X n) where 'm' is the number of Linear Inequality Constraints</para></listitem></varlistentry>
   <varlistentry><term>b :</term>
      <listitem><para> a vector of doubles, related to 'A' and containing the Right hand side equation of the Linear Inequality Constraints of size (m X 1)</para></listitem></varlistentry>
   <varlistentry><term>Aeq :</term>
      <listitem><para> a matrix of doubles, containing coefficients of Linear Equality Constraints of size (m1 X n) where 'm1' is the number of Linear Equality Constraints</para></listitem></varlistentry>
   <varlistentry><term>beq :</term>
      <listitem><para> a vector of doubles, related to 'Aeq' and containing the Right hand side equation of the Linear Equality Constraints of size (m1 X 1)</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> a vector of doubles, containing lower bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of Variables</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> a vector of doubles, containing upper bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of Variables</para></listitem></varlistentry>
   <varlistentry><term>nlc :</term>
      <listitem><para> a function, representing Non-linear Constraints functions(both Equality and Inequality) of the problem. It is declared in such a way that non-linear Inequality constraints are defined first as a single row vector (c), followed by non-linear Equality constraints as another single row vector (ceq)</para></listitem></varlistentry>
   <varlistentry><term>options :</term>
      <listitem><para> a list, containing option for user to specify -Maximum iteration, Maximum CPU-time, GradObj, Hessian &amp; GradCon.                                       Syntax for options- options= list("MaxIter", [---], "CpuTime", [---], "GradObj", "ON/OFF", "Hessian", "ON/OFF", "GradCon", "ON/OFF");                                             Default Values for Options==&gt; ("MaxIter", [10000], "CpuTime", [600], "GradObj", "OFF", "Hessian", "OFF", "GradCon", "OFF");</para></listitem></varlistentry>
   <varlistentry><term>fGrad :</term>
      <listitem><para> a function, representing gradient function of the Objective in Vector Form</para></listitem></varlistentry>
   <varlistentry><term>lHess :</term>
      <listitem><para> a function, representing hessian function of the Lagrange in Symmetric Matrix Form</para></listitem></varlistentry>
   <varlistentry><term>cGrad :</term>
      <listitem><para> a function, representing gradient of the Non-Linear Constraints (both Equality and Inequality) of the problem. It is declared in such a way that gradient of non-linear Inequality constraints are defined first as a separate Matrix (cg of size m2 X n as empty), followed by gradient of non-linear Equality constraints as a separate Matrix (ceqg of size m2 X n or as empty) where m2 &amp; m3 are number of Non-linear Inequality and Equality constraints respectively</para></listitem></varlistentry>
   <varlistentry><term>xopt :</term>
      <listitem><para> a vector of doubles, cointating the computed solution of the optimization problem</para></listitem></varlistentry>
   <varlistentry><term>fopt :</term>
      <listitem><para> a scalar of double, containing the function value at x</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> a scalar of integer, containing flag which denotes the reason for termination of algorithm</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> a structure, containing information about the optimization</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> a vector of doubles, containing Lagrange multipliers at the optimized point</para></listitem></varlistentry>
   <varlistentry><term>gradient :</term>
      <listitem><para> a vector of doubles, containing Objective's gradient of the optimized point</para></listitem></varlistentry>
   <varlistentry><term>hessian  :</term>
      <listitem><para> a matrix of doubles, containing Objective's hessian of the optimized point</para></listitem></varlistentry>
   <varlistentry><term>zl :</term>
      <listitem><para> a vector of doubles, containing lower bound multipliers</para></listitem></varlistentry>
   <varlistentry><term>zu :</term>
      <listitem><para> a vector of doubles, containing upper bound multipliers</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a Constrained optimization problem specified by :
find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; f(x) \\
&amp; \text{subject to} &amp; A*x \leq b \\
&amp; &amp; Aeq*x \ = beq\\
&amp; &amp; c(x) \leq  0\\
&amp; &amp; ceq(x) \ =  0\\
&amp; &amp; lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
We are calling IPOpt for solving the Constrained problem, IPOpt is a library written in C++.
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

//Find x in R^2 such that it minimizes:
//f(x)= -x1 -x2/3
//x0=[0,0]
//constraint-1 (c1): x1 + x2 <= 2
//constraint-2 (c2): x1 + x2/4 <= 1
//constraint-3 (c3): x1 - x2 <= 2
//constraint-4 (c4): -x1/4 - x2 <= 1
//constraint-5 (c5): -x1 - x2 <= -1
//constraint-6 (c6): -x1 + x2 <= 2
//constraint-7 (c7): x1 + x2 = 2

//Objective function to be minimised
function y=f(x)
y=-x(1)-x(2)/3;
endfunction

//Starting point, linear constraints and variable bounds
x0=[0 , 0 , 0];
A=[1,1 ; 1,1/4 ; 1,-1 ; -1/4,-1 ; -1,-1 ; -1,1];
b=[2;1;2;1;-1;2];
Aeq=[1,1];
beq=[2];
lb=[];
ub=[];

//Options
options=list("GradObj", "ON", "Hessian", "ON","GradCon", "OFF");

//Gradient of objective function
function y= fGrad(x)
y= [-1,-1/3];
endfunction

//Hessian of lagrangian
function y= lHess(x,obj,lambda)
y= obj*[0,0;0,0]
endfunction

//Calling IPopt
[x,fval,exitflag,output,lambda,grad,hessian,zl,zu] =fmincon(f, x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad,lHess)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

//Find x in R^3 such that it minimizes:
//f(x)= x1*x2 + x2*x3
//x0=[0.1 , 0.1 , 0.1]
//constraint-1 (c1): x1^2 - x2^2 + x3^2 <= 2
//constraint-2 (c2): x1^2 + x2^2 + x3^2 <= 10

//Objective function to be minimised
function y=f(x)
y=x(1)*x(2)+x(2)*x(3);
endfunction

//Starting point, linear constraints and variable bounds
x0=[0.1 , 0.1 , 0.1];
A=[];
b=[];
Aeq=[];
beq=[];
lb=[];
ub=[];

//Nonlinear constraints
function [c,ceq]=nlc(x)
c = [x(1)^2 - x(2)^2 + x(3)^2 - 2 , x(1)^2 + x(2)^2 + x(3)^2 - 10];
ceq = [];
endfunction

//Options
options=list("MaxIter", [1500], "CpuTime", [500], "GradObj", "ON", "Hessian", "ON","GradCon", "ON");

//Gradient of objective function
function y= fGrad(x)
y= [x(2),x(1)+x(3),x(2)];
endfunction

//Hessian of the Lagrange Function
function y= lHess(x,obj,lambda)
y= obj*[0,1,0;1,0,1;0,1,0] + lambda(1)*[2,0,0;0,-2,0;0,0,2] + lambda(2)*[2,0,0;0,2,0;0,0,2]
endfunction

//Gradient of Non-Linear Constraints
function [cg,ceqg] = cGrad(x)
cg=[2*x(1) , -2*x(2) , 2*x(3) ; 2*x(1) , 2*x(2) , 2*x(3)];
ceqg=[];
endfunction

//Calling IPopt
[x,fval,exitflag,output,lambda,grad,hessian,zl,zu] =fmincon(f, x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad,lHess,cGrad)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

The below Problem is an Unbounded problem:
//Find x in R^3 such that it minimizes:
//f(x)= -(x1^2 + x2^2 + x3^2)
//x0=[0.1 , 0.1 , 0.1]
//  x1 <= 0
//  x2 <= 0
//  x3 <= 0

//Objective function to be minimised
function y=f(x)
y=-(x(1)^2+x(2)^2+x(3)^2);
endfunction

//Starting point, linear constraints and variable bounds
x0=[0.1 , 0.1 , 0.1];
A=[];
b=[];
Aeq=[];
beq=[];
lb=[];
ub=[0,0,0];

//Options
options=list("MaxIter", [1500], "CpuTime", [500], "GradObj", "OFF", "Hessian", "OFF","GradCon", "OFF");

//Calling IPopt
[x,fval,exitflag,output,lambda,grad,hessian,zl,zu] =fmincon(f, x0,A,b,Aeq,beq,lb,ub,[],options)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[

The below Problem is an Infeasible problem:
//Find x in R^3 such that in minimizes:
//f(x)=x1*x2 + x2*x3
//x0=[1,1,1]
//constraint-1 (c1): x1^2 <= 1
//constraint-2 (c2): x1^2 + x2^2 <= 1
//constraint-3 (c3): x3^2 <= 1
//constraint-4 (c4): x1^3 = 0.5
//constraint-5 (c5): x2^2 + x3^2 = 0.75
// 0 <= x1 <=0.6
// 0.2 <= x2 <= inf
// -inf <= x3 <= 1

//Objective function to be minimised
function y=f(x)
y=x(1)*x(2)+x(2)*x(3);
endfunction

//Starting point, linear constraints and variable bounds
x0=[1,1,1];
A=[];
b=[];
Aeq=[];
beq=[];
lb=[0 0.2,-%inf];
ub=[0.6 %inf,1];

//Nonlinear constraints
function [c,ceq]=nlc(x)
c=[x(1)^2-1,x(1)^2+x(2)^2-1,x(3)^2-1];
ceq=[x(1)^3-0.5,x(2)^2+x(3)^2-0.75];
endfunction

//Options
options=list("MaxIter", [1500], "CpuTime", [500], "GradObj", "ON", "Hessian", "ON","GradCon", "ON");

//Gradient of objective function
function y= fGrad(x)
y= [x(2),x(1)+x(3),x(2)];
endfunction

//Hessian of the Lagrange Function
function y= lHess(x,obj,lambda)
y= obj*[0,1,0;1,0,1;0,1,0] + lambda(1)*[2,0,0;0,0,0;0,0,0] + lambda(2)*[2,0,0;0,2,0;0,0,0] +lambda(3)*[0,0,0;0,0,0;0,0,2] + lambda(4)*[6*x(1),0,0;0,0,0;0,0,0] + lambda(5)*[0,0,0;0,2,0;0,0,2];
endfunction

//Gradient of Non-Linear Constraints
function [cg,ceqg] = cGrad(x)
cg = [2*x(1),0,0;2*x(1),2*x(2),0;0,0,2*x(3)];
ceqg = [3*x(1)^2,0,0;0,2*x(2),2*x(3)];
endfunction

//Calling IPopt
[x,fval,exitflag,output,lambda,grad,hessian,zl,zu] =fmincon(f, x0,A,b,Aeq,beq,lb,ub,nlc,options,fGrad,lHess,cGrad)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>R.Vidyadhar , Vignesh Kannan</member>
   </simplelist>
</refsection>
</refentry>
